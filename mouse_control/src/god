#!/usr/bin/env python3
import rospy

from enum import Enum

from mouse_description.msg import MouseCommand
from mouse_description.msg import MouseData
from mouse_description.msg import SensorData
from mouse_control.msg import GodMail
from mouse_control.msg import Score
from mouse_control.msg import Vision

# Level 1: Total Omniscience
from mouse_control.msg import Omniscience

def leakMap():
	msg = Omniscience()
	for x in range(WORLD_WIDTH):
		for y in range(WORLD_HEIGHT):
			if reconMap[x][y] == '':
				continue
			msg.type.append(reconMap[x][y])
			msg.x.append(x)
			msg.y.append(y)
	omnipub.publish(msg)

	# THE GUI
	orien_symbols = {'0': ">", '1': "^", '2': "<", '3': "v"}
	for y in reversed(range(WORLD_HEIGHT)):
		for x in range(WORLD_WIDTH):
			r = reconMap[x][y]
			if 'B' in r or 'A' in r:
				angle = r[0]
				a = orien_symbols[angle] + r[1:]
			else: 
				a = r
			print(f'{a:^5}', end="")
		print()

# Constants
NUM_ANTS = rospy.get_param('NUM_ANTS')
NUM_BEES = rospy.get_param('NUM_BEES')
WORLD_HEIGHT = rospy.get_param('WORLD_HEIGHT')
WORLD_WIDTH = rospy.get_param('WORLD_WIDTH')

# Comms
antData = [None] * NUM_ANTS
beeData = [None] * NUM_BEES
antControl = []
beeControl = []
antVision = []
beeVision = []
antCamp = [False] * NUM_ANTS
beeCamp = [False] * NUM_BEES

def dataCallback(data, args):
	args[0][args[1]] = data

def antCallback(data):
	global antTransition
	if state == States.WAITALIGN and data.type == GodMail.ALIGNED:
		antTransition = True
	elif state == States.WAITCOMPUTE and data.type == GodMail.COMPUTED:
		antTransition = True
	else:
		rospy.logerr(f'Unsychronized! god ant {state} {data.type}')

def beeCallback(data):
	global beeTransition
	if state == States.WAITALIGN and data.type == GodMail.ALIGNED:
		beeTransition = True
	elif state == States.WAITCOMPUTE and data.type == GodMail.COMPUTED:
		beeTransition = True
	else:
		rospy.logerr(f'Unsychronized! god bee {state} {data.type}')

# World
wallPos, antPos, beePos, antFlag, beeFlag = [], [], [], None, None
reconMap = [['' for j in range(WORLD_HEIGHT)] for i in range(WORLD_WIDTH)] # x,y indexing

def parseWorld(filename):
	f = open(filename, 'r')
	lines = f.readlines()
	lines.reverse()

	global antFlag, beeFlag
	for y in range(len(lines)):
		for x in range(len(lines[y])):
			if lines[y][x] == '#':
				wallPos.append((x, y))
			elif lines[y][x] == 'A':
				antPos.append((x,y))
			elif lines[y][x] == 'B':
				beePos.append((x,y))
			elif lines[y][x] == 'F':
				if y < len(lines) // 2:
					antFlag = (x,y)
				else:
					beeFlag = (x,y)
	beePos.reverse()

# Helpers
antScore, beeScore, gameOver = NUM_ANTS, NUM_BEES, False
antFlagCaptured, antFlagIndex = False, 0 # index is actually into bees
beeFlagCaptured, beeFlagIndex = False, 0 # index is actually into ants

def reconstructMap():
	# see Omniscience.msg for more info

	for x in range(WORLD_WIDTH):
		for y in range(WORLD_HEIGHT):
			reconMap[x][y] = ''

	for w in wallPos:
		reconMap[w[0]][w[1]] = '#'
	for i in range(NUM_ANTS):
		reconMap[antData[i].x][antData[i].y] = f'{antData[i].ang}A'
	for i in range(NUM_BEES):
		reconMap[beeData[i].x][beeData[i].y] = f'{beeData[i].ang}B'

	if antFlagCaptured:
		reconMap[beeData[antFlagIndex].x][beeData[antFlagIndex].y] += 'F'
	elif 'A' in reconMap[antFlag[0]][antFlag[1]]:
		reconMap[antFlag[0]][antFlag[1]] += 'C'
	else:
		reconMap[antFlag[0]][antFlag[1]] += 'F'

	if beeFlagCaptured:
		reconMap[antData[beeFlagIndex].x][antData[beeFlagIndex].y] += 'F'
	elif 'B' in reconMap[beeFlag[0]][beeFlag[1]]:
		reconMap[beeFlag[0]][beeFlag[1]] += 'C'
	else:
		reconMap[beeFlag[0]][beeFlag[1]] += 'F'

def tagLogic():
	# Find tags
	antTags, beeTags = set(), set()

	for i in range(NUM_ANTS):
		x, y = antData[i].x, antData[i].y
		if y >= WORLD_HEIGHT//2: # taggable?
			if y + 1 < WORLD_HEIGHT and 'B' in reconMap[x][y+1] and '1' not in reconMap[x][y+1]: # up
				antTags.add(i)
			if y - 1 >= WORLD_HEIGHT//2 and 'B' in reconMap[x][y-1] and '3' not in reconMap[x][y-1]: # down
				antTags.add(i)
			if x + 1 < WORLD_WIDTH and 'B' in reconMap[x+1][y] and '0' not in reconMap[x+1][y]: # left
				antTags.add(i)
			if x - 1 >= 0 and 'B' in reconMap[x-1][y] and '2' not in reconMap[x-1][y]: # right
				antTags.add(i)

	for i in range(NUM_BEES):
		x, y = beeData[i].x, beeData[i].y
		if y < WORLD_HEIGHT//2: # taggable?
			if y + 1 < WORLD_HEIGHT//2 and 'A' in reconMap[x][y+1] and '1' not in reconMap[x][y+1]: # up
				beeTags.add(i)
			if y - 1 >= 0 and 'A' in reconMap[x][y-1] and '3' not in reconMap[x][y-1]: # down
				beeTags.add(i)
			if x + 1 < WORLD_WIDTH and 'A' in reconMap[x+1][y] and '0' not in reconMap[x+1][y]: # left
				beeTags.add(i)
			if x - 1 >= 0 and 'A' in reconMap[x-1][y] and '2' not in reconMap[x-1][y]: # right
				beeTags.add(i)

	# Teleport back
	# tags from teleportation not allowed, wait until next step
	for i in antTags:
		rospy.loginfo(f'ant{i} tagged!')

		global beeFlagCaptured
		if beeFlagCaptured and i == beeFlagIndex:
			beeFlagCaptured = False

		x, y = antPos[i]
		if reconMap[x][y] != '':
			for yp in range(WORLD_HEIGHT//2):
				for xp in range(WORLD_WIDTH):
					if reconMap[xp][yp] == '':
						x, y = xp, yp
						break
				if reconMap[x][y] == '':
					break

		# incorrect wrt flags, but corrected after
		reconMap[antData[i].x][antData[i].y] = ''
		reconMap[x][y] = 'A1'

		cmd = MouseCommand()
		cmd.immediate = True
		cmd.type = MouseCommand.TELEPORT
		cmd.x, cmd.y, cmd.ang = x, y, 1
		antControl[i].publish(cmd)

	for i in beeTags:
		rospy.loginfo(f'bee{i} tagged!')
		
		global antFlagCaptured
		if antFlagCaptured and i == antFlagIndex:
			antFlagCaptured = False

		x, y = beePos[i]
		if reconMap[x][y] != '':
			for yp in reverse(range(WORLD_HEIGHT//2, WORLD_HEIGHT)):
				for xp in reverse(range(WORLD_WIDTH)):
					if reconMap[xp][yp] == '':
						x, y = xp, yp
						break
				if reconMap[x][y] == '':
					break

		# incorrect wrt flags, but corrected after
		reconMap[beeData[i].x][beeData[i].y] = ''
		reconMap[x][y] = 'B3'

		cmd = MouseCommand()
		cmd.immediate = True
		cmd.type = MouseCommand.TELEPORT
		cmd.x, cmd.y, cmd.ang = x, y, 3
		beeControl[i].publish(cmd)

	# breaks abstraction a bit
	global antScore, beeScore
	antScore += len(beeTags) * 50
	beeScore += len(antTags) * 50

	# changes take some time to propagate back
	if antTags or beeTags:
		rospy.sleep(0.2)

def flagLogic():
	global antFlagCaptured, antFlagIndex, beeFlagCaptured, beeFlagIndex

	if not antFlagCaptured:
		for i in range(NUM_BEES):
			if beeData[i].x == antFlag[0] and beeData[i].y == antFlag[1]:
				rospy.loginfo('Bees have captured the flag!')
				antFlagCaptured = True
				antFlagIndex = i
				break

	if not beeFlagCaptured:
		for i in range(NUM_ANTS):
			if antData[i].x == beeFlag[0] and antData[i].y == beeFlag[1]:
				rospy.loginfo('Ants have captured the flag!')
				beeFlagCaptured = True
				beeFlagIndex = i
				break

def sensorLogic():
	dxys = [(1,0),(0,1),(-1,0),(0,-1)] # direction 0-3

	def helper(num, data, vision, flagcap, flagind):
		for i in range(num):
			msg = Vision()
			for dx, dy in dxys:
				# find hit
				x, y, d = data[i].x + dx, data[i].y + dy, 1
				while reconMap[x][y] == '': # map must be surrounded by walls
					x, y, d = x+dx, y+dy, d+1
				# find type
				if '#' in reconMap[x][y]:
					msg.type.append(SensorData.WALL)
				elif 'A' in reconMap[x][y]:
					msg.type.append(SensorData.ANT)
				elif 'B' in reconMap[x][y]:
					msg.type.append(SensorData.BEE)
				else:
					msg.type.append(SensorData.AIR)
				# check flag
				if 'F' in reconMap[x][y] or 'C' in reconMap[x][y]:
					msg.flag.append(True)
				else:
					msg.flag.append(False)
				# send it
				msg.dist.append(d)
			if flagcap and i == flagind:
				msg.hasFlag = True
			vision[i].publish(msg)

	helper(NUM_ANTS, antData, antVision, beeFlagCaptured, beeFlagIndex)
	helper(NUM_BEES, beeData, beeVision, antFlagCaptured, antFlagIndex)

def pointLogic():
	global antScore, beeScore, gameOver

	if gameOver:
		rospy.logfatal('GAME OVER WHY ARE U STILL PLAYING?!')
		return

	for i in range(NUM_ANTS):
		if beeFlagCaptured and beeFlagIndex == i: # exempt if u have flag
			continue
		elif not antFlagCaptured and antData[i].x == antFlag[0] and antData[i].y == antFlag[1]: # no camping
			if antCamp[i]:
				antScore -= 100
			else:
				antCamp[i] = True
				antScore -= 1
		elif antData[i].y < WORLD_HEIGHT//2: # can't stay on your side
			antCamp[i] = False
			antScore -= 1

	for i in range(NUM_BEES):
		if antFlagCaptured and antFlagIndex == i: # exempt if u have flag
			continue
		elif not beeFlagCaptured and beeData[i].x == beeFlag[0] and beeData[i].y == beeFlag[1]: # no camping
			if beeCamp[i]:
				beeScore -= 100
			else:
				beeCamp[i] = True
				beeScore -= 1
		elif beeData[i].y >= WORLD_HEIGHT//2: # can't stay on your side
			beeCamp[i] = False
			beeScore -= 1

	if antFlagCaptured and beeData[antFlagIndex].x == beeFlag[0] and beeData[antFlagIndex].y == beeFlag[1]:
		gameOver = True
		beeScore += 1000

	if beeFlagCaptured and antData[beeFlagIndex].x == antFlag[0] and antData[beeFlagIndex].y == antFlag[1]:
		gameOver = True
		antScore += 1000

	rospy.loginfo(f'antScore: {antScore} beeScore: {beeScore}')
	if gameOver:
		if antScore > beeScore:
			rospy.logfatal('GAME OVER ANTS WIN!!!')
		elif antScore < beeScore:
			rospy.logfatal('GAME OVER BEES WIN!!!')
		else:
			rospy.logfatal('GAME OVER IT\'S A TIE?!')

	msg = Score()
	msg.antScore = antScore
	msg.beeScore = beeScore
	msg.gameOver = gameOver
	scorePub.publish(msg)

def main():
	parseWorld(rospy.get_param('WORLD_FILE'))

	# connections to all mice
	for i in range(NUM_ANTS):
		rospy.Subscriber(f'ants/ant{i}/telemetry', MouseData, dataCallback, (antData, i))
		antControl.append(rospy.Publisher(f'ants/ant{i}/command', MouseCommand, queue_size=10))
		# antVision.append(rospy.Publisher(f'ants/ant{i}/vision', Vision, queue_size=10))
	for i in range(NUM_BEES):
		rospy.Subscriber(f'bees/bee{i}/telemetry', MouseData, dataCallback, (beeData, i))
		beeControl.append(rospy.Publisher(f'bees/bee{i}/command', MouseCommand, queue_size=10))
		# beeVision.append(rospy.Publisher(f'bees/bee{i}/vision', Vision, queue_size=10))

	# state machine setup
	global States, state, antTransition, beeTransition
	States = Enum('states', 'WAITALIGN WAITCOMPUTE')
	state = States.WAITALIGN
	antTransition = False
	beeTransition = False
	isAntsTurn = True

	# comms with motherships
	rospy.Subscriber('/ants/godRX', GodMail, antCallback)
	rospy.Subscriber('/bees/godRX', GodMail, beeCallback)
	antSocket = rospy.Publisher('/ants/godTX', GodMail, queue_size=10)
	beeSocket = rospy.Publisher('/bees/godTX', GodMail, queue_size=10)

	while antSocket.get_num_connections() == 0 or beeSocket.get_num_connections() == 0:
		pass

	# score
	global scorePub
	scorePub = rospy.Publisher('/score', Score, queue_size=10)

	# Level 1: Total Omniscience
	global omnipub
	omnipub = rospy.Publisher('/omniscience', Omniscience, queue_size=10)
	while omnipub.get_num_connections() != (2 + NUM_ANTS + NUM_BEES):
		pass

	# Wait for alignment first
	while not (antTransition and beeTransition):
		pass
	antTransition = False

	r = rospy.Rate(10) # changing this can change the game's speed
	while not rospy.is_shutdown():
		if state == States.WAITALIGN:
			if isAntsTurn and beeTransition: # wait for bees to finish turn
				beeTransition = False
				state = States.WAITCOMPUTE

				reconstructMap()
				tagLogic()
				reconstructMap()
				flagLogic()
				reconstructMap()
				# sensorLogic()
				pointLogic()

				leakMap() # Level 1: Total Omniscience

				# technically everything being updated isn't guaranteed (tiny chance)
				# bc messages might not be processed in time
				# can add a small delay here to decrease that chance significantly
				rospy.sleep(0.1)

				msg = GodMail()
				msg.type = GodMail.COMPUTE
				antSocket.publish(msg)
			elif not isAntsTurn and antTransition: # wait for ants to finish turn
				antTransition = False
				state = States.WAITCOMPUTE

				# no tag logic do when bees finish
				reconstructMap()
				flagLogic()
				reconstructMap()
				# sensorLogic()
				# no point logic do when bees finish
				rospy.loginfo(f'antScore: {antScore} beeScore: {beeScore}')

				leakMap() # Level 1: Total Omniscience

				rospy.sleep(0.1) # synchronization

				msg = GodMail()
				msg.type = GodMail.COMPUTE
				beeSocket.publish(msg)
		elif state == States.WAITCOMPUTE:
			if isAntsTurn and antTransition: # wait for ants to finish thinking
				antTransition = False
				state = States.WAITALIGN
				isAntsTurn = False

				msg = GodMail()
				msg.type = GodMail.MOVE
				antSocket.publish(msg)
			if not isAntsTurn and beeTransition: # wait for bees to finish thinking
				beeTransition = False
				state = States.WAITALIGN
				isAntsTurn = True

				msg = GodMail()
				msg.type = GodMail.MOVE
				beeSocket.publish(msg)
		else:
			rospy.logerr('Invalid state!')

		r.sleep()

if __name__ == '__main__':
	rospy.init_node('god')
	try:
		main()
	except rospy.ROSInterruptException:
		pass