#!/usr/bin/env python3
import rospy
import tf_conversions

import numpy as np
from enum import Enum

from mouse_description.msg import MouseCommand
from mouse_description.msg import MouseData
from mouse_control.msg import GodMail
from gazebo_msgs.srv import SetModelState
from gazebo_msgs.srv import SetModelStateRequest

# Level 1: Total Omniscience
from mouse_control.msg import Omniscience

def leakMap():
	msg = Omniscience()
	for x in range(WORLD_WIDTH):
		for y in range(WORLD_HEIGHT):
			if reconMap[x][y] == ' ':
				continue
			msg.type.append(reconMap[x][y])
			msg.x.append(x)
			msg.y.append(y)
	omnipub.publish(msg)

# Constants
GRID = rospy.get_param('GRID_SIZE')
NUM_ANTS = rospy.get_param('NUM_ANTS')
NUM_BEES = rospy.get_param('NUM_BEES')
WORLD_HEIGHT = rospy.get_param('WORLD_HEIGHT')
WORLD_WIDTH = rospy.get_param('WORLD_WIDTH')

# Comms
antData = [None] * NUM_ANTS
beeData = [None] * NUM_BEES
antControl = []
beeControl = []

def dataCallback(data, args):
	args[0][args[1]] = data

def antCallback(data):
	global antTransition
	if state == States.WAITALIGN and data.type == GodMail.ALIGNED:
		antTransition = True
	elif state == States.WAITCOMPUTE and data.type == GodMail.COMPUTED:
		antTransition = True
	else:
		rospy.logerr(f'Unsychronized! god {state} {data.type}')

def beeCallback(data):
	global beeTransition
	if state == States.WAITALIGN and data.type == GodMail.ALIGNED:
		beeTransition = True
	elif state == States.WAITCOMPUTE and data.type == GodMail.COMPUTED:
		beeTransition = True
	else:
		rospy.logerr(f'Unsychronized! god {state} {data.type}')

# World
wallPos, antPos, beePos, antFlag, beeFlag = [], [], [], None, None
reconMap = [[' ' for j in range(WORLD_HEIGHT)] for i in range(WORLD_WIDTH)] # x,y indexing

def parseWorld(filename):
	f = open(filename, 'r')
	lines = f.readlines()
	lines.reverse()

	global antFlag, beeFlag
	for y in range(len(lines)):
		for x in range(len(lines[y])):
			if lines[y][x] == '#':
				wallPos.append((x, y))
			elif lines[y][x] == 'A':
				antPos.append((x,y))
			elif lines[y][x] == 'B':
				beePos.append((x,y))
			elif lines[y][x] == 'F':
				if y < len(lines) // 2:
					antFlag = (x,y)
				else:
					beeFlag = (x,y)
	beePos.reverse()

# Helpers
antFlagCaptured, antFlagIndex = False, 0 # index is actually into bees
beeFlagCaptured, beeFlagIndex = False, 0 # index is actually into ants

def reconstructMap():
	# # = wall
	# A = ant
	# B = ant
	# F = flag
	# AF = ant w/ flag
	# BF = bee w/ flag
	# number after indicates orientation

	for x in range(WORLD_WIDTH):
		for y in range(WORLD_HEIGHT):
			reconMap[x][y] = ' '

	for w in wallPos:
		reconMap[w[0]][w[1]] = '#'
	for i in range(NUM_ANTS):
		reconMap[antData[i].x][antData[i].y] = f'A{antData[i].ang}'
	for i in range(NUM_BEES):
		reconMap[beeData[i].x][beeData[i].y] = f'B{beeData[i].ang}'

	if antFlagCaptured:
		reconMap[beeData[antFlagIndex].x][beeData[antFlagIndex].y] = f'BF{beeData[antFlagIndex].ang}'
	else:
		reconMap[antFlag[0]][antFlag[1]] = 'F'

	if beeFlagCaptured:
		reconMap[antData[beeFlagIndex].x][antData[beeFlagIndex].y] = f'AF{antData[beeFlagIndex].ang}'
	else:
		reconMap[beeFlag[0]][beeFlag[1]] = 'F'

def tagLogic():
	# Find tags
	antTags, beeTags = set(), set()

	for i in range(NUM_ANTS):
		x, y = antData[i].x, antData[i].y
		if y >= WORLD_HEIGHT//2: # taggable?
			if y + 1 < WORLD_HEIGHT and 'B' in reconMap[x][y+1] and '1' not in reconMap[x][y+1]: # up
				antTags.add(i)
			if y - 1 >= WORLD_HEIGHT//2 and 'B' in reconMap[x][y-1] and '3' not in reconMap[x][y-1]: # down
				antTags.add(i)
			if x + 1 < WORLD_WIDTH and 'B' in reconMap[x+1][y] and '0' not in reconMap[x+1][y]: # left
				antTags.add(i)
			if x - 1 >= 0 and 'B' in reconMap[x-1][y] and '2' not in reconMap[x-1][y]: # right
				antTags.add(i)

	for i in range(NUM_BEES):
		x, y = beeData[i].x, beeData[i].y
		if y < WORLD_HEIGHT//2: # taggable?
			if y + 1 < WORLD_HEIGHT//2 and 'A' in reconMap[x][y+1] and '1' not in reconMap[x][y+1]: # up
				beeTags.add(i)
			if y - 1 >= 0 and 'A' in reconMap[x][y-1] and '3' not in reconMap[x][y-1]: # down
				beeTags.add(i)
			if x + 1 < WORLD_WIDTH and 'A' in reconMap[x+1][y] and '0' not in reconMap[x+1][y]: # left
				beeTags.add(i)
			if x - 1 >= 0 and 'A' in reconMap[x-1][y] and '2' not in reconMap[x-1][y]: # right
				beeTags.add(i)

	# Teleport back
	# tags from teleportation not allowed, wait until next step
	for i in antTags:
		rospy.loginfo(f'ant{i} tagged!')

		global beeFlagCaptured
		if beeFlagCaptured and i == beeFlagIndex:
			beeFlagCaptured = False

		x, y = antPos[i]
		if reconMap[x][y] != ' ':
			for yp in range(WORLD_HEIGHT//2):
				for xp in range(WORLD_WIDTH):
					if reconMap[xp][yp] == ' ':
						x, y = xp, yp
						break
				if reconMap[x][y] == ' ':
					break

		reconMap[antData[i].x][antData[i].y] = ' '
		reconMap[x][y] = 'A1'

		cmd = MouseCommand()
		cmd.immediate = True
		cmd.type = MouseCommand.TELEPORT
		cmd.x, cmd.y, cmd.ang = x, y, 1
		antControl[i].publish(cmd)

	for i in beeTags:
		rospy.loginfo(f'bee{i} tagged!')
		
		global antFlagCaptured
		if antFlagCaptured and i == antFlagIndex:
			antFlagCaptured = False

		x, y = beePos[i]
		if reconMap[x][y] != ' ':
			for yp in reverse(range(WORLD_HEIGHT//2, WORLD_HEIGHT)):
				for xp in reverse(range(WORLD_WIDTH)):
					if reconMap[xp][yp] == ' ':
						x, y = xp, yp
						break
				if reconMap[x][y] == ' ':
					break

		reconMap[beeData[i].x][beeData[i].y] = ' '
		reconMap[x][y] = 'B3'

		cmd = MouseCommand()
		cmd.immediate = True
		cmd.type = MouseCommand.TELEPORT
		cmd.x, cmd.y, cmd.ang = x, y, 3
		beeControl[i].publish(cmd)

	# Teleportation is inaccurate for some reason
	if antTags or beeTags:
		rospy.sleep(0.2)
	for i in antTags:
		while not antData[i].aligned:
			pass
		rospy.loginfo(f'ant{i} recovered!')
	for i in beeTags:
		while not beeData[i].aligned:
			pass
		rospy.loginfo(f'bee{i} recovered!')

def flagLogic():
	global antFlagCaptured, antFlagIndex, beeFlagCaptured, beeFlagIndex

	if not antFlagCaptured:
		for i in range(NUM_BEES):
			if beeData[i].x == antFlag[0] and beeData[i].y == antFlag[1]:
				rospy.loginfo('Bees have captured the flag!')
				antFlagCaptured = True
				antFlagIndex = i
				break
	else:
		if beeData[antFlagIndex].x == beeFlag[0] and beeData[antFlagIndex].y == beeFlag[1]:
			rospy.logfatal('GAME OVER BEES WIN')

	if not beeFlagCaptured:
		for i in range(NUM_ANTS):
			if antData[i].x == beeFlag[0] and antData[i].y == beeFlag[1]:
				rospy.loginfo('Ants have captured the flag!')
				beeFlagCaptured = True
				beeFlagIndex = i
				break
	else:
		if antData[beeFlagIndex].x == antFlag[0] and antData[beeFlagIndex].y == antFlag[1]:
			rospy.logfatal('GAME OVER ANTS WIN')

	# TODO Add logic to prevent camping (unless bot has flag)?

def sensorLogic():
	# TODO for each bot for each sensor, notify the nearest object type and distance

	pass

def gazeboMove(model, x=0, y=0, z=0, R=0, P=0, Y=0):
	args = SetModelStateRequest()
	args.model_state.model_name = model
	args.model_state.reference_frame = 'world'
	args.model_state.pose.position.x = x
	args.model_state.pose.position.y = y
	args.model_state.pose.position.z = z
	q = tf_conversions.transformations.quaternion_from_euler(R, P, Y)
	args.model_state.pose.orientation.x = q[0]
	args.model_state.pose.orientation.y = q[1]
	args.model_state.pose.orientation.z = q[2]
	args.model_state.pose.orientation.w = q[3]
	rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)(args)

def main():
	parseWorld(rospy.get_param('WORLD_FILE'))

	for i in range(NUM_ANTS):
		rospy.Subscriber(f'ants/ant{i}/telemetry', MouseData, dataCallback, (antData, i))
		antControl.append(rospy.Publisher(f'ants/ant{i}/command', MouseCommand, queue_size=10))
	for i in range(NUM_BEES):
		rospy.Subscriber(f'bees/bee{i}/telemetry', MouseData, dataCallback, (beeData, i))
		beeControl.append(rospy.Publisher(f'bees/bee{i}/command', MouseCommand, queue_size=10))

	global States, state, antTransition, beeTransition
	States = Enum('states', 'WAITALIGN WAITCOMPUTE')
	state = States.WAITALIGN
	antTransition = False
	beeTransition = False

	rospy.Subscriber('/ants/godRX', GodMail, antCallback)
	rospy.Subscriber('/bees/godRX', GodMail, beeCallback)
	antSocket = rospy.Publisher('/ants/godTX', GodMail, queue_size=10)
	beeSocket = rospy.Publisher('/bees/godTX', GodMail, queue_size=10)

	while antSocket.get_num_connections() == 0 or beeSocket.get_num_connections() == 0:
		pass

	# Level 1: Total Omniscience
	global omnipub
	omnipub = rospy.Publisher('/omniscience', Omniscience, queue_size=10)

	r = rospy.Rate(10) # changing this can change the game's speed
	while not rospy.is_shutdown():
		if state == States.WAITALIGN:
			if antTransition and beeTransition:
				antTransition = False
				beeTransition = False
				state = States.WAITCOMPUTE

				reconstructMap()
				tagLogic()
				reconstructMap() # needed?
				flagLogic()
				reconstructMap()
				sensorLogic()

				# Level 1: Total Omniscience
				leakMap()

				msg = GodMail()
				msg.type = GodMail.COMPUTE
				antSocket.publish(msg)
				beeSocket.publish(msg)
		elif state == States.WAITCOMPUTE:
			if antTransition and beeTransition:
				antTransition = False
				beeTransition = False
				state = States.WAITALIGN
				msg = GodMail()
				msg.type = GodMail.MOVE
				antSocket.publish(msg)
				beeSocket.publish(msg)
		else:
			rospy.logerr('Invalid state!')

		# Flag visualization
		if antFlagCaptured:
			x, y, a = beeData[antFlagIndex].x, beeData[antFlagIndex].y, beeData[antFlagIndex].ang
		else:
			x, y, a = antFlag[0], antFlag[1], 1
		gazeboMove('ant_flag', x=x*GRID, y=y*GRID, Y=(a - 1)*np.pi/2)

		if beeFlagCaptured:
			x, y, a = antData[beeFlagIndex].x, antData[beeFlagIndex].y, antData[beeFlagIndex].ang
		else:
			x, y, a = beeFlag[0], beeFlag[1], 1
		gazeboMove('bee_flag', x=x*GRID, y=y*GRID, Y=(a - 1)*np.pi/2)

		r.sleep()

if __name__ == '__main__':
	rospy.init_node('god')
	try:
		main()
	except rospy.ROSInterruptException:
		pass