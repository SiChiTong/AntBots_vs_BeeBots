#!/usr/bin/env python3
import rospy

import numpy as np
from enum import Enum

from std_msgs.msg import String
from mouse_description.msg import MouseCommand
from mouse_description.msg import MouseData
from mouse_control.msg import GodMail
from mouse_control.msg import UserMail
from mouse_control.msg import Score

# Choose algorithm at the bottom!

# Level 1: Total Omniscience
from mouse_control.msg import Omniscience

WORLD_HEIGHT = rospy.get_param('/WORLD_HEIGHT')
WORLD_WIDTH = rospy.get_param('/WORLD_WIDTH')
reconMap = [[' ' for j in range(WORLD_HEIGHT)] for i in range(WORLD_WIDTH)]

def omniCallback(data):
	for x in range(WORLD_WIDTH):
		for y in range(WORLD_HEIGHT):
			reconMap[x][y] = ' '
	for t, x, y in zip(data.type, data.x, data.y):
		reconMap[x][y] = t

# Comms
def mouseCallback(data, num):
	miceData[num] = data

def godCallback(data):
	global transition
	if state == States.WAITCOMP and data.type == GodMail.COMPUTE:
		transition = True
	elif state == States.WAITMOVE and data.type == GodMail.MOVE:
		transition = True
	else:
		rospy.logerr(f'Unsychronized! {ROLE} {state} {data.type}')

def userCallback(data):
	global usercmd, uservalid
	usercmd = data
	uservalid = True

def scoreCallback(data):
	global score
	score = data

# Helpers
def allAligned():
	return all([d.aligned for d in miceData])

def dist(x1, y1, x2, y2):
	return np.sqrt((y1-y2)**2 + (x1-x2)**2)

def main():
	# connections with its mice
	global miceData, miceControl
	miceData = [None] * NUM
	miceControl = []
	for i in range(NUM):
		rospy.Subscriber(f'{ROLE}{ROLE[1:-2]}{i}/telemetry', MouseData, mouseCallback, i)
		miceControl.append(rospy.Publisher(f'{ROLE}{ROLE[1:-2]}{i}/command', MouseCommand, queue_size=10))

	while not all(miceData):
		pass # wait for mice to bootup and send telemetry

	# state machine setup
	global States, state, transition
	States = Enum('states', 'WAITCOMP WAITMOVE WAITALIGN')
	state = States.WAITALIGN
	transition = False

	# comms with god node
	rospy.Subscriber(f'{ROLE}godTX', GodMail, godCallback)
	godSocket = rospy.Publisher(f'{ROLE}godRX', GodMail, queue_size=10)

	while godSocket.get_num_connections() == 0:
		pass

	global score
	score = Score()
	rospy.Subscriber('/score', Score, scoreCallback)

	# user input
	global usercmd, uservalid, USER
	USER = rospy.get_param(f'{ROLE[:-1].upper()}_USERCONTROL')
	rospy.Subscriber('user', UserMail, userCallback)
	uservalid = False

	# moves to do
	miceMoves = [MouseCommand() for _ in range(NUM)]

	initAlg(ISANT, NUM)

	# Level 1: Total Omniscience
	rospy.Subscriber('/omniscience', Omniscience, omniCallback)

	r = rospy.Rate(30)
	while not rospy.is_shutdown():
		if score.gameOver:
			r.sleep()
			continue

		if state == States.WAITCOMP:
			if transition:
				transition = False
				state = States.WAITMOVE

				if USER:
					while not uservalid:
						pass
					for i in range(NUM):
						miceMoves[i].type = usercmd.type[i]
					uservalid = False
				else:
					computeMoves(miceMoves, score, miceData, reconMap)

				msg = GodMail()
				msg.type = GodMail.COMPUTED
				godSocket.publish(msg)
		elif state == States.WAITMOVE:
			if transition:
				transition = False
				state = States.WAITALIGN
				for pub, cmd in zip(miceControl, miceMoves):
					pub.publish(cmd)
		elif state == States.WAITALIGN:
			if allAligned():
				state = States.WAITCOMP
				msg = GodMail()
				msg.type = GodMail.ALIGNED
				godSocket.publish(msg)
		else:
			rospy.logerr('Invalid state!')

		r.sleep()

if __name__ == '__main__':
	rospy.init_node('mothership')
	global ROLE, NUM
	ROLE = rospy.get_namespace()
	ISANT = ROLE == '/ants/'
	NUM = rospy.get_param('/NUM_ANTS' if ISANT else '/NUM_BEES')

	# Choose algorithm here!
	if ISANT:
		from algorithms.naive_astar import initAlg, computeMoves
	else:
		from algorithms.tagger import initAlg, computeMoves

	try:
		main()
	except rospy.ROSInterruptException:
		pass