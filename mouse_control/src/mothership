#!/usr/bin/env python3
import rospy

import numpy as np
from enum import Enum

from mouse_description.msg import MouseCommand
from mouse_description.msg import MouseData
from mouse_control.msg import GodMail

# Comms
def mouseCallback(data, num):
	miceData[num] = data

def godCallback(data):
	global transition
	if state == States.WAITCOMP and data.type == GodMail.COMPUTE:
		transition = True
	elif state == States.WAITMOVE and data.type == GodMail.MOVE:
		transition = True
	else:
		rospy.logerr(f'Unsychronized! {ROLE} {state} {data.type}')

# Helpers
def allAligned():
	return all([d.aligned for d in miceData])

def dist(x1, y1, x2, y2):
	return np.sqrt((y1-y2)**2 + (x1-x2)**2)

def main():
	global miceData, miceControl
	miceData = [None] * NUM
	miceControl = []
	for i in range(NUM):
		rospy.Subscriber(f'{ROLE}{ROLE[1:-2]}{i}/telemetry', MouseData, mouseCallback, i)
		miceControl.append(rospy.Publisher(f'{ROLE}{ROLE[1:-2]}{i}/command', MouseCommand, queue_size=10))

	while not all(miceData):
		pass # wait for mice to bootup and send telemetry

	global States, state, transition
	States = Enum('states', 'WAITCOMP WAITMOVE WAITALIGN')
	state = States.WAITALIGN
	transition = False

	rospy.Subscriber(f'{ROLE}godTX', GodMail, godCallback)
	godSocket = rospy.Publisher(f'{ROLE}godRX', GodMail, queue_size=10)

	while godSocket.get_num_connections() == 0:
		pass

	miceMoves = [None] * NUM

	r = rospy.Rate(30)
	while not rospy.is_shutdown():
		if state == States.WAITCOMP:
			if transition:
				transition = False
				state = States.WAITMOVE

				# TODO perform computation here, all sensor data should be valid
				# DEMO remove later
				for i in range(NUM):
					miceMoves[i] = MouseCommand()
					miceMoves[i].type = MouseCommand.LEFT

				msg = GodMail()
				msg.type = GodMail.COMPUTED
				godSocket.publish(msg)
		elif state == States.WAITMOVE:
			if transition:
				transition = False
				state = States.WAITALIGN
				for pub, cmd in zip(miceControl, miceMoves):
					pub.publish(cmd)
		elif state == States.WAITALIGN:
			if allAligned():
				state = States.WAITCOMP
				msg = GodMail()
				msg.type = GodMail.ALIGNED
				godSocket.publish(msg)
		else:
			rospy.logerr('Invalid state!')

		r.sleep()

if __name__ == '__main__':
	rospy.init_node('mothership')
	global ROLE, NUM
	ROLE = rospy.get_namespace()
	NUM = rospy.get_param('/NUM_ANTS' if ROLE=='/ants/' else '/NUM_BEES')
	try:
		main()
	except rospy.ROSInterruptException:
		pass