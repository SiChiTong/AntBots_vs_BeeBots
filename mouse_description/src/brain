#!/usr/bin/env python3
import rospy

import argparse
from enum import Enum

from mouse_description.msg import MouseCommand
from mouse_description.msg import MouseData
from mouse_description.msg import SensorData

# DAQ
sense = None

# commands from the mothership
def commandCallback(data):
	global xd, yd, angd, imm
	if data.type == MouseCommand.FORWARD:
		if sense.centerDist != 1 or sense.centerType == SensorData.AIR or data.force:
			xd += 1 if angd == MouseData.EAST else 0
			yd += 1 if angd == MouseData.NORTH else 0
			xd -= 1 if angd == MouseData.WEST else 0
			yd -= 1 if angd == MouseData.SOUTH else 0
		else:
			rospy.logerr(f'{rospy.get_namespace()} not gonna run into a wall!')
	elif data.type == MouseCommand.LEFT:
		angd = (angd + 1) % 4
	elif data.type == MouseCommand.RIGHT:
		angd = (angd - 1) % 4
	elif data.type == MouseCommand.STOP:
		pass
	elif data.type == MouseCommand.TELEPORT:
		xd = data.x
		yd = data.y
		angd = data.ang
	else:
		rospy.logerr('Invalid command!')

def sensorCallback(data):
	global sense
	sense = data

# Positioning
xd = 0
yd = 0
angd = MouseData.EAST

def computeKnownCells(msg):
	dxys = [(1,0),(0,1),(-1,0),(0,-1)] # direction 0-3

	def traceCells(ang, dis, typ, fla):
		dx, dy = dxys[ang]
		xs, ys = xd + dx, yd + dy
		if dis == 0: # out of range so all blocks in range are air
			for i in range(0, sense.maxRange):
				msg.types.append(SensorData.AIR)
				msg.flags.append(False)
				msg.xs.append(xs)
				msg.ys.append(ys)
				xs += dx
				ys += dy
		else:
			for i in range(0, dis - 1):
				msg.types.append(SensorData.AIR)
				msg.flags.append(False)
				msg.xs.append(xs)
				msg.ys.append(ys)
				xs += dx
				ys += dy
			msg.types.append(typ)
			msg.flags.append(fla)
			msg.xs.append(xs)
			msg.ys.append(ys)

	traceCells((angd+1)%4, sense.leftDist, sense.leftType, sense.leftFlag)
	traceCells(angd, sense.centerDist, sense.centerType, sense.centerFlag)
	traceCells((angd-1)%4, sense.rightDist, sense.rightType, sense.rightFlag)

def main():
	# internal stuff
	rospy.Subscriber('sensor_data', SensorData, sensorCallback)

	# wireless comms w/ mothership
	rospy.Subscriber('command', MouseCommand, commandCallback)
	telem = rospy.Publisher('telemetry', MouseData, queue_size=10)

	while not sense:
		pass # wait until sensors are booted

	r = rospy.Rate(30)
	while not rospy.is_shutdown():
		msg = MouseData()
		msg.x, msg.y, msg.ang = xd, yd, angd
		msg.aligned = True
		msg.hasFlag = sense.hasFlag
		computeKnownCells(msg)
		telem.publish(msg)

		r.sleep()

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('-x', default=0, type=int, help='x coordinate')
	parser.add_argument('-y', default=0, type=int, help='y coordinate')
	parser.add_argument('-a', default=0, type=int, help='direction')
	args = parser.parse_args(rospy.myargv()[1:])
	xd, yd, angd = args.x, args.y, args.a

	rospy.init_node('brain')
	try:
		main()
	except rospy.ROSInterruptException:
		pass