#!/usr/bin/env python3
import rospy

import argparse
from enum import Enum

from mouse_description.msg import MouseCommand
from mouse_description.msg import MouseData
from mouse_description.msg import SensorData

# Level 2: Hivemind
from mouse_control.msg import Omniscience

WORLD_HEIGHT = rospy.get_param('/WORLD_HEIGHT')
WORLD_WIDTH = rospy.get_param('/WORLD_WIDTH')
reconMap = [[' ' for j in range(WORLD_HEIGHT)] for i in range(WORLD_WIDTH)]

def omniCallback(data):
	for x in range(WORLD_WIDTH):
		for y in range(WORLD_HEIGHT):
			reconMap[x][y] = ' '
	for t, x, y in zip(data.type, data.x, data.y):
		reconMap[x][y] = t

# DAQ
sense = None

# commands from the mothership
def commandCallback(data):
	global xd, yd, angd, imm

	dxys = [(1,0),(0,1),(-1,0),(0,-1)] # direction 0-3
	dx, dy = dxys[angd]
	fx, fy = xd+dx, yd+dy # cell in front

	if data.type == MouseCommand.FORWARD:
		if reconMap[fx][fy] == ' ' or reconMap[fx][fy] == 'F' or data.force:
			xd += 1 if angd == MouseData.EAST else 0
			yd += 1 if angd == MouseData.NORTH else 0
			xd -= 1 if angd == MouseData.WEST else 0
			yd -= 1 if angd == MouseData.SOUTH else 0
		else:
			rospy.logerr(f'{rospy.get_namespace()} not gonna run into a wall!')
	elif data.type == MouseCommand.LEFT:
		angd = (angd + 1) % 4
	elif data.type == MouseCommand.RIGHT:
		angd = (angd - 1) % 4
	elif data.type == MouseCommand.STOP:
		pass
	elif data.type == MouseCommand.TELEPORT:
		xd = data.x
		yd = data.y
		angd = data.ang
	else:
		rospy.logerr('Invalid command!')

def sensorCallback(data):
	global sense
	sense = data

# Positioning
xd = 0
yd = 0
angd = MouseData.EAST

# Level 2: Omniscience
def computeRadiusCells(msg):
	# simulates laser + camera data by picking out from omniscience data what would have been identified
	MAX_RANGE = 3 # manhattan distance
	dxys = [(1,0),(0,1),(-1,0),(0,-1)] # direction 0-3

	ldx, ldy = dxys[(angd + 1) % 4]
	cdx, cdy = dxys[angd]
	rdx, rdy = dxys[(angd - 1) % 4]

	# filter out what we can see
	pts = set()
	pts.add((xd, yd))
	for _ in range(MAX_RANGE):
		oldpts = pts.copy()
		for x, y in oldpts:
			pts.add((x+ldx,y+ldy))
			pts.add((x+cdx,y+cdy))
			pts.add((x+rdx,y+rdy))

	# get the points
	for x, y in pts:
		if x >= 0 and x < WORLD_WIDTH and y >= 0 and y < WORLD_HEIGHT:
			msg.types.append(reconMap[x][y])
			msg.xs.append(x)
			msg.ys.append(y)

def main():
	# internal stuff
	# rospy.Subscriber('sensor_data', SensorData, sensorCallback)

	# wireless comms w/ mothership
	rospy.Subscriber('command', MouseCommand, commandCallback)
	telem = rospy.Publisher('telemetry', MouseData, queue_size=10)

	# while not sense:
	# 	pass # wait until sensors are booted

	# Level 2: Hivemind
	rospy.Subscriber('/omniscience', Omniscience, omniCallback)

	r = rospy.Rate(30)
	while not rospy.is_shutdown():
		msg = MouseData()
		msg.x, msg.y, msg.ang = xd, yd, angd
		msg.aligned = True
		computeRadiusCells(msg)
		telem.publish(msg)

		r.sleep()

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('-x', default=0, type=int, help='x coordinate')
	parser.add_argument('-y', default=0, type=int, help='y coordinate')
	parser.add_argument('-a', default=0, type=int, help='direction')
	args = parser.parse_args(rospy.myargv()[1:])
	xd, yd, angd = args.x, args.y, args.a

	rospy.init_node('brain')
	try:
		main()
	except rospy.ROSInterruptException:
		pass