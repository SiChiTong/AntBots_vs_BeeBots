#!/usr/bin/env python3
import rospy
import rospkg
import xacro
import tf_conversions

import sys
import subprocess
import math
import numpy as np

from std_srvs.srv import Empty
from gazebo_msgs.srv import SpawnModel
from gazebo_msgs.srv import SpawnModelRequest

# world file parser helpers
wallPos, antPos, beePos, antFlag, beeFlag = [], [], [], None, None

def parseWorld(filename):
	f = open(filename, 'r')
	lines = f.readlines()
	lines.reverse()

	global antFlag, beeFlag
	for y in range(len(lines)):
		for x in range(len(lines[y])):
			if lines[y][x] == '#':
				wallPos.append((x, y))
			elif lines[y][x] == 'A':
				antPos.append((x,y))
			elif lines[y][x] == 'B':
				beePos.append((x,y))
			elif lines[y][x] == 'F':
				if y < len(lines) // 2:
					antFlag = (x,y)
				else:
					beeFlag = (x,y)
	beePos.reverse()

	rospy.set_param('WORLD_HEIGHT', max([p[1] for p in wallPos]) + 1)
	rospy.set_param('WORLD_WIDTH', max([p[0] for p in wallPos]) + 1)

# launch file alternatives
def find(pkg):
	return rospkg.RosPack().get_path(pkg)

def param(name, xacro_file):
	rospy.set_param(name, xacro.process_file(xacro_file).toxml())

def spawn_model(name, desc, x=0, y=0, z=0, R=0, P=0, Y=0):
	spawn = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)
	config = SpawnModelRequest()
	config.model_name = name
	config.model_xml = rospy.get_param(desc)
	config.robot_namespace = name
	config.initial_pose.position.x = x
	config.initial_pose.position.y = y
	config.initial_pose.position.z = z
	q = tf_conversions.transformations.quaternion_from_euler(R, P, Y)
	config.initial_pose.orientation.x  = q[0]
	config.initial_pose.orientation.y  = q[1]
	config.initial_pose.orientation.z  = q[2]
	config.initial_pose.orientation.w  = q[3]
	spawn(config)

def start_node(pkg, typ, name, ns='/', args=None):
	if args:
		subprocess.Popen(['rosrun', pkg, typ, f'__name:={name}', f'__ns:={ns}', *args.split(' ')], 
			stdin=subprocess.PIPE)
	else:
		subprocess.Popen(['rosrun', pkg, typ, f'__name:={name}', f'__ns:={ns}'], 
			stdin=subprocess.PIPE)

if __name__ == '__main__':
	rospy.init_node('spawner')

	rospy.wait_for_service('/gazebo/pause_physics')
	rospy.ServiceProxy('/gazebo/pause_physics', Empty)()

	# Grab some constants
	GRID = rospy.get_param('GRID_SIZE')
	WORLDFILENAME = rospy.get_param('WORLD_FILE')
	param('ant_desc', f'{find("mouse_description")}/urdf/ant.xacro')
	param('bee_desc', f'{find("mouse_description")}/urdf/bee.xacro')
	param('box_desc', f'{find("mouse_gazebo")}/models/box.xacro')
	param('flag_desc', f'{find("mouse_gazebo")}/models/flag.xacro')
	param('div_desc', f'{find("mouse_gazebo")}/models/divider.xacro')
	rospy.wait_for_service('/gazebo/spawn_urdf_model')

	rospy.loginfo(f'Parsing {WORLDFILENAME} ...')
	parseWorld(WORLDFILENAME)

	rospy.loginfo('Spawning map...')
	for i, pos in enumerate(wallPos):
		spawn_model(f'box{i}', 'box_desc', x=pos[0]*GRID, y=pos[1]*GRID)
	h = rospy.get_param('WORLD_HEIGHT')
	for i in range(rospy.get_param('WORLD_WIDTH')):
		spawn_model(f'div{i}', 'div_desc', x=i*GRID, y=(h//2 - 0.5)*GRID)
	spawn_model('antflag', 'flag_desc', x=antFlag[0]*GRID, y=antFlag[1]*GRID)
	spawn_model('beeflag', 'flag_desc', x=beeFlag[0]*GRID, y=beeFlag[1]*GRID)

	rospy.loginfo('Spawning ants...')
	rospy.set_param('NUM_ANTS', len(antPos))
	for i, pos in enumerate(antPos):
		spawn_model(f'ants/ant{i}', 'ant_desc', x=pos[0]*GRID, y=pos[1]*GRID, Y=0)
		start_node('mouse_description', 'sensor', 'sensor', f'ants/ant{i}')
		start_node('mouse_description', 'brain', 'brain', f'ants/ant{i}', f'-x {pos[0]} -y {pos[1]} -a {1}')

	rospy.loginfo('Spawning bees...')
	rospy.set_param('NUM_BEES', len(beePos))
	for i, pos in enumerate(beePos):
		spawn_model(f'bees/bee{i}', 'bee_desc', x=pos[0]*GRID, y=pos[1]*GRID, Y=np.pi)
		start_node('mouse_description', 'sensor', 'sensor', f'bees/bee{i}')
		start_node('mouse_description', 'brain', 'brain', f'bees/bee{i}', f'-x {pos[0]} -y {pos[1]} -a {3}')

	rospy.loginfo('Spawning the Insect God...') # TODO

	rospy.loginfo('Spawning Ant Queen...')
	start_node('mouse_gazebo', 'mothership', 'mothership', 'ants')

	rospy.loginfo('Spawning Queen Bee...')
	start_node('mouse_gazebo', 'mothership', 'mothership', 'bees')

	# TODO wait a little bit for all nodes to start? (by using a topic)
	rospy.wait_for_service('/gazebo/unpause_physics')
	rospy.ServiceProxy('/gazebo/unpause_physics', Empty)()