#!/usr/bin/env python3
import rospy
import rospkg
import xacro
import tf_conversions

import sys
import argparse
import subprocess
import math
import numpy as np

from std_srvs.srv import Empty
from gazebo_msgs.srv import SpawnModel
from gazebo_msgs.srv import SpawnModelRequest

if __name__ == '__main__':
	rospy.init_node('spawner')

	rospy.wait_for_service('/gazebo/pause_physics')
	rospy.ServiceProxy('/gazebo/pause_physics', Empty)()

	# helper funcs
	def find(pkg):
		return rospkg.RosPack().get_path(pkg)

	def param(name, xacro_file):
		rospy.set_param(name, xacro.process_file(xacro_file).toxml())

	def spawn_model(name, desc, x=0, y=0, z=0, R=0, P=0, Y=0):
		spawn = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)
		config = SpawnModelRequest()
		config.model_name = name
		config.model_xml = rospy.get_param(desc)
		config.robot_namespace = name
		config.initial_pose.position.x = x
		config.initial_pose.position.y = y
		config.initial_pose.position.z = z
		q = tf_conversions.transformations.quaternion_from_euler(R, P, Y)
		config.initial_pose.orientation.x  = q[0]
		config.initial_pose.orientation.y  = q[1]
		config.initial_pose.orientation.z  = q[2]
		config.initial_pose.orientation.w  = q[3]
		spawn(config)

	def start_node(pkg, typ, name, ns='/', args=None):
		if args:
			subprocess.Popen(['rosrun', pkg, typ, f'__name:={name}', f'__ns:={ns}', *args.split(' ')], 
				stdin=subprocess.PIPE) #, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		else:
			subprocess.Popen(['rosrun', pkg, typ, f'__name:={name}', f'__ns:={ns}'], 
				stdin=subprocess.PIPE) #, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

	rospy.wait_for_service('/gazebo/spawn_urdf_model')
	param('ant_desc', f'{find("mouse_description")}/urdf/ant.xacro')
	param('bee_desc', f'{find("mouse_description")}/urdf/bee.xacro')
	GRID = rospy.get_param('GRID_SIZE')

	print('Spawning map...')

	print('Spawning ants...')
	for i in range(rospy.get_param('NUM_ANTS')):
		x, y, a = map(int, rospy.get_param(f'POS_ANT{i}').split(' '))
		spawn_model(f'ants/ant{i}', 'ant_desc', x=x*GRID, y=y*GRID, Y=(a-1)*np.pi/2)
		start_node('mouse_description', 'sensor', 'sensor', f'ants/ant{i}')
		start_node('mouse_description', 'brain', 'brain', f'ants/ant{i}', f'-x {x} -y {y} -a {a}')

	print('Spawning bees...')
	for i in range(rospy.get_param('NUM_BEES')):
		x, y, a = map(int, rospy.get_param(f'POS_BEE{i}').split(' '))
		spawn_model(f'bees/bee{i}', 'bee_desc', x=x*GRID, y=y*GRID, Y=(a-1)*np.pi/2)
		start_node('mouse_description', 'sensor', 'sensor', f'bees/bee{i}')
		start_node('mouse_description', 'brain', 'brain', f'bees/bee{i}', f'-x {x} -y {y} -a {a}')

	print('Starting the Ant Queen...')
	start_node('mouse_gazebo', 'mothership', 'mothership', 'ants')

	print('Starting the Queen Bee...')
	start_node('mouse_gazebo', 'mothership', 'mothership', 'bees')

	# TODO wait a little bit for all nodes to start? (by using a topic)
	rospy.wait_for_service('/gazebo/unpause_physics')
	rospy.ServiceProxy('/gazebo/unpause_physics', Empty)()