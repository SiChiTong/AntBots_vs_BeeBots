#!/usr/bin/env python3
import rospy
import rospkg
import xacro
import tf_conversions

import sys
import argparse
import subprocess
import math

from std_srvs.srv import Empty
from gazebo_msgs.srv import SpawnModel
from gazebo_msgs.srv import SpawnModelRequest

if __name__ == '__main__':
	rospy.init_node('spawner')

	rospy.wait_for_service('/gazebo/pause_physics')
	rospy.ServiceProxy('/gazebo/pause_physics', Empty)()

	# helper funcs
	def find(pkg):
		return rospkg.RosPack().get_path(pkg)

	def param(name, xacro_file):
		rospy.set_param(name, xacro.process_file(xacro_file).toxml())

	def spawn_model(name, desc, x=0, y=0, z=0, R=0, P=0, Y=0):
		spawn = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)
		config = SpawnModelRequest()
		config.model_name = name
		config.model_xml = rospy.get_param(desc)
		config.robot_namespace = name
		config.initial_pose.position.x = x
		config.initial_pose.position.y = y
		config.initial_pose.position.z = z
		q = tf_conversions.transformations.quaternion_from_euler(R, P, Y)
		config.initial_pose.orientation.x  = q[0]
		config.initial_pose.orientation.y  = q[1]
		config.initial_pose.orientation.z  = q[2]
		config.initial_pose.orientation.w  = q[3]
		spawn(config)

	rospy.wait_for_service('/gazebo/spawn_urdf_model')
	param('mouse_desc', f'{find("mouse_description")}/urdf/mouse.xacro')

	print('Spawning map...')

	print('Spawning ants...')
	
	# TEST
	spawn_model('ants/ant0', 'mouse_desc')

	print('Spawning bees...')

	# more helpers
	def start_node(pkg, typ, name, ns='/'):
		subprocess.Popen(['rosrun', pkg, typ, f'__name:={name}', f'__ns:={ns}'], 
			stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

	print('Giving everybody eyes and a brain...')

	# TEST
	start_node('mouse_description', 'sensor', 'sensor', 'ants/ant0')
	start_node('mouse_description', 'brain', 'brain', 'ants/ant0')

	print('Starting the mothership...')
	# start_node('mouse_gazebo', 'mothership', 'mothership')

	# TODO wait a little bit for all nodes to start? (by using a topic)
	rospy.wait_for_service('/gazebo/unpause_physics')
	rospy.ServiceProxy('/gazebo/unpause_physics', Empty)()